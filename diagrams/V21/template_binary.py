#!/usr/bin/env python
#coding=utf8

"""
"""

U_tmpl = """ 
    "U_%(U)s": [("I_%(I1)s", 2),   ("I_%(I2)s", 2),   ("V_%(V1)s", 2), ("V_%(V2)s", 1)], 
    "Up_%(U)s":[("Vp_%(V1)s",3),  ("Vp_%(V2)s", 2),   ("I_%(I1)s", 1), ("I_%(I2)s", 1)], 
    "I_%(I1)s":[("Up_%(U)s", 3),   ("U_%(U)s",  1)],
    "I_%(I2)s":[("Up_%(U)s", 4),   ("U_%(U)s",  2)], 
"""

V_tmpl = """
    "V_%(V)s" :[("U_%(U1)s", 4),   ("U_%(U2)s", 3),   ("O_%(O)s",  2)],
    "Vp_%(V)s":[("O_%(O)s",  1),   ("Up_%(U1)s",2),   ("Up_%(U2)s",1)],
    "O_%(O)s" :[("Vp_%(V)s", 1),   ("V_%(V)s",  3)], 
"""

ooN_tmpl = """{
    "%(name)s_%(1)s_%(2)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2)],
    "I_%(1)s":[("%(name)s_%(1)s_%(2)s", 1), ("%(name)s_%(1)s_%(2)s", 3)],
    "I_%(2)s":[("%(name)s_%(1)s_%(2)s", 2), ("%(name)s_%(1)s_%(2)s", 4)]
}    
"""

#two site op.
oo2_tmpl =  """{
    "oo_%(1)s_%(2)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2)],
    "I_%(1)s":[("oo_%(1)s_%(2)s", 1), ("oo_%(1)s_%(2)s", 3)],
    "I_%(2)s":[("oo_%(1)s_%(2)s", 2), ("oo_%(1)s_%(2)s", 4)]
    }
"""

#two site op.
oo2_tmpl =  """{
    "oo_%(1)s_%(2)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2)],
    "I_%(1)s":[("oo_%(1)s_%(2)s", 1), ("oo_%(1)s_%(2)s", 3)],
    "I_%(2)s":[("oo_%(1)s_%(2)s", 2), ("oo_%(1)s_%(2)s", 4)]
    }
"""

#3 site op.
oo3_tmpl =  """{
    "ooo_%(1)s_%(2)s_%(3)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(3)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2), ("I_%(3)s", 2)],
    "I_%(1)s":[("ooo_%(1)s_%(2)s_%(3)s", 1), ("ooo_%(1)s_%(2)s_%(3)s", 4)],
    "I_%(2)s":[("ooo_%(1)s_%(2)s_%(3)s", 2), ("ooo_%(1)s_%(2)s_%(3)s", 5)],
    "I_%(3)s":[("ooo_%(1)s_%(2)s_%(3)s", 3), ("ooo_%(1)s_%(2)s_%(3)s", 6)]
    }
"""

G2 = { 
    "U_1": [("I_2",  2),   ("I_3",  2),   ("V_0", 2), ("V_1", 1)], 
    "Up_1":[("Vp_0", 3),  ("Vp_1",  2),   ("I_2", 1), ("I_3", 1)], 
    "I_2":[("Up_1",  3),   ("U_1",  1)],
    "I_3":[("Up_1",  4),   ("U_1",  2)], 
 
    "U_2": [("I_4",  2),   ("I_5",  2),   ("V_1", 2), ("V_2", 1)], 
    "Up_2":[("Vp_1", 3),  ("Vp_2",  2),   ("I_4", 1), ("I_5", 1)], 
    "I_4":[("Up_2",  3),   ("U_2",  1)],
    "I_5":[("Up_2",  4),   ("U_2",  2)], 

    #"V_0" :[("U_0", 4),   ("U_1", 3),   ("O_0",  2)],
    #"Vp_0":[("O_0",  1),   ("Up_0",2),   ("Up_1",1)],
    "V_0" :[("I_1",  2),   ("U_1",  3),   ("O_0",  2)],
    "Vp_0":[("O_0",  1),   ("I_1",  1),   ("Up_1",1)],
    "I_1" :[("Vp_0", 2),  ("V_0",   1)], 

    "O_0" :[("Vp_0", 1),   ("V_0",  3)], 

    "V_1" :[("U_1",  4),   ("U_2",  3),   ("O_1",  2)],
    "Vp_1":[("O_1",  1),   ("Up_1", 2),   ("Up_2",1)],
    "O_1" :[("Vp_1", 1),   ("V_1",  3)], 

    #"V_2" :[("U_2", 4),   ("U_3",  3),   ("O_2",  2)],
    #"Vp_2":[("O_2",  1),   ("Up_2",2),   ("Up_3",1)],
    "V_2" :[("U_2",  4),   ("I_6",  2),   ("O_2",  2)],
    "Vp_2":[("O_2",  1),   ("Up_2", 2),   ("I_6", 1)],
    "I_6" :[("Vp_2", 3),   ("V_2",  2)], 
    "O_2" :[("Vp_2", 1),   ("V_2",  3)], 
}
def make_template():
    res= "{"
    k = 3
    for i in xrange(1,k):
        j=2*i
        #算子的相对位置
        #D={"U":i, "V1":i-1, "V2":i, "I1":j, "I2":j + 1}
        D={"U":i, "V1":i-1, "V2":i, "I1":j, "I2":j + 1}
        #print U_tmpl % D
        res +=  U_tmpl % D
        
    for i in xrange(0,k):
        j=i*2+1
        D={"V":i, "U1":i, "U2":i+1, "O":i}
        #print V_tmpl % D
        res += V_tmpl % D
    res+= "}" 
    return res


if __name__ == "__main__":
    from merapy.diagrams.diagram import compare_template
    g = make_template()
    #g = eval(g)
    print g
    #compare_template(G3, g)



