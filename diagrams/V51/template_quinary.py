#!/usr/bin/env python
#coding=utf8
import pprint 
from merapy.diagrams.diagram import Diagram

"""
V are of (5, 1) type tensors

"""

__all__ = ["G5", 'G5_2block']

PERIOD = 5
if 1:
    U_tmpl = """ 
    "U_%(U)s":[("I_%(I1)s", 2), ("I_%(I2)s", 2), ("V_%(V1)s", 5), ("V_%(V2)s",1)], 
    "Up_%(U)s":[("Vp_%(V1)s", 6), ("Vp_%(V2)s",2), ("I_%(I1)s", 1), ("I_%(I2)s", 1)], 
    "I_%(I1)s":[("Up_%(U)s", 3), ("U_%(U)s", 1)],
    "I_%(I2)s":[("Up_%(U)s", 4), ("U_%(U)s", 2)],
    """

    V_tmpl = """
    "V_%(V)s":[("U_%(U1)s", 4), ("I_%(I1)s", 2), ("I_%(I2)s", 2), ("I_%(I3)s", 2), ("U_%(U2)s", 3), ("O_%(O)s", 2)],
    "Vp_%(V)s":[("O_%(O)s", 1), ("Up_%(U1)s", 2), ("I_%(I1)s", 1), ("I_%(I2)s", 1), ("I_%(I3)s", 1), ("Up_%(U2)s", 1)],
    "I_%(I1)s":[("Vp_%(V)s", 3), ("V_%(V)s", 2)],
    "I_%(I2)s":[("Vp_%(V)s", 4), ("V_%(V)s", 3)],
    "I_%(I3)s":[("Vp_%(V)s", 5), ("V_%(V)s", 4)],
    "O_%(O)s":[("Vp_%(V)s",1), ("V_%(V)s", 6)],
    """



D_U = lambda i, j:{"U":i, "V1":i-1, "V2":i, "I1":j-1, "I2":j, "I3":j+1}
D_V=lambda i, j:{"V":i, "U1":i, "U2":i+1, "O":i, "I1":j+1, "I2":j+2,"I3":j+3}

if 0:
    oo2_tmpl =  """{
        "oo_%(1)s_%(2)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2)],
        "I_%(1)s":[("oo_%(1)s_%(2)s", 1), ("oo_%(1)s_%(2)s", 3)],
        "I_%(2)s":[("oo_%(1)s_%(2)s", 2), ("oo_%(1)s_%(2)s", 4)]
        }
    """

    oo3_tmpl =  """{
        "ooo_%(1)s_%(2)s_%(3)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(3)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2), ("I_%(3)s", 2)],
        "I_%(1)s":[("ooo_%(1)s_%(2)s_%(3)s", 1), ("ooo_%(1)s_%(2)s_%(3)s", 4)],
        "I_%(2)s":[("ooo_%(1)s_%(2)s_%(3)s", 2), ("ooo_%(1)s_%(2)s_%(3)s", 5)],
        "I_%(3)s":[("ooo_%(1)s_%(2)s_%(3)s", 3), ("ooo_%(1)s_%(2)s_%(3)s", 6)]
        }
    """

    ooN_tmpl = """{
        "%(name)s_%(1)s_%(2)s":[("I_%(1)s",1), ("I_%(2)s", 1), ("I_%(1)s", 2), ("I_%(2)s", 2)],
        "I_%(1)s":[("%(name)s_%(1)s_%(2)s", 1), ("%(name)s_%(1)s_%(2)s", 3)],
        "I_%(2)s":[("%(name)s_%(1)s_%(2)s", 2), ("%(name)s_%(1)s_%(2)s", 4)]
    }    
    """

    
# 2blocks
G5_2block = {
    #"V_1":[("U_1", 4), ("I_2", 2), ("I_3", 2), ("I_4", 2), ("U_2", 3), ("O_1", 2)],
    #"Vp_1":[("O_1", 1), ("Up_1", 2), ("I_2", 1), ("I_3", 1), ("I_4", 1), ("Up_2", 1)],
    "V_1":[("I_1", 2), ("I_2", 2), ("I_3", 2), ("I_4", 2), ("U_2", 3), ("O_1", 2)],
    "Vp_1":[("O_1", 1), ("I_1", 1), ("I_2", 1), ("I_3", 1), ("I_4", 1), ("Up_2", 1)],
    "I_1":[("Vp_1", 2), ("V_1", 1)], 

    "I_2":[("Vp_1", 3), ("V_1", 2)],
    "I_3":[("Vp_1", 4), ("V_1", 3)],
    "I_4":[("Vp_1", 5), ("V_1", 4)],
    "O_1":[("Vp_1",1), ("V_1", 6)],
    
    #"V_2":[("U_2", 4), ("I_7", 2), ("I_8", 2), ("I_9", 2), ("U_3", 3), ("O_2", 2)],
    #"Vp_2":[("O_2", 1), ("Up_2", 2), ("I_7", 1), ("I_8", 1), ("I_9", 1), ("Up_3", 1)],
    "V_2":[("U_2", 4), ("I_7", 2), ("I_8", 2), ("I_9", 2), ("I_10", 2), ("O_2", 2)],
    "Vp_2":[("O_2", 1), ("Up_2", 2), ("I_7", 1), ("I_8", 1), ("I_9", 1), ("I_10", 1)],
    "I_10":[("Vp_2", 6), ("V_2", 5)], 

    "I_7":[("Vp_2", 3), ("V_2", 2)],
    "I_8":[("Vp_2", 4), ("V_2", 3)],
    "I_9":[("Vp_2", 5), ("V_2", 4)],
    "O_2":[("Vp_2",1), ("V_2", 6)],
 
    "U_2":[("I_5", 2), ("I_6", 2), ("V_1", 5), ("V_2",1)], 
    "Up_2":[("Vp_1", 6), ("Vp_2",2), ("I_5", 1), ("I_6", 1)], 
    "I_5":[("Up_2", 3), ("U_2", 1)],
    "I_6":[("Up_2", 4), ("U_2", 2)],
    }

# 2block
G5 = {
    #"V_1":[("U_1", 4), ("I_2", 2), ("I_3", 2), ("I_4", 2), ("U_2", 3), ("O_1", 2)],
    #"Vp_1":[("O_1", 1), ("Up_1", 2), ("I_2", 1), ("I_3", 1), ("I_4", 1), ("Up_2", 1)],
    "V_1":[("I_1", 2), ("I_2", 2), ("I_3", 2), ("I_4", 2), ("U_2", 3), ("O_1", 2)],
    "Vp_1":[("O_1", 1), ("I_1", 1), ("I_2", 1), ("I_3", 1), ("I_4", 1), ("Up_2", 1)],
    "I_1":[("Vp_1", 2), ("V_1", 1)], 

    "I_2":[("Vp_1", 3), ("V_1", 2)],
    "I_3":[("Vp_1", 4), ("V_1", 3)],
    "I_4":[("Vp_1", 5), ("V_1", 4)],
    "O_1":[("Vp_1",1), ("V_1", 6)],
    

    "V_2":[("U_2", 4), ("I_7", 2), ("I_8", 2), ("I_9", 2), ("U_3", 3), ("O_2", 2)],
    "Vp_2":[("O_2", 1), ("Up_2", 2), ("I_7", 1), ("I_8", 1), ("I_9", 1), ("Up_3", 1)],
    "I_7":[("Vp_2", 3), ("V_2", 2)],
    "I_8":[("Vp_2", 4), ("V_2", 3)],
    "I_9":[("Vp_2", 5), ("V_2", 4)],
    "O_2":[("Vp_2",1), ("V_2", 6)],
    

    #"V_3":[("U_3", 4), ("I_12", 2), ("I_13", 2), ("I_14", 2), ("U_4", 3), ("O_3", 2)],
    #"Vp_3":[("O_3", 1), ("Up_3", 2), ("I_12", 1), ("I_13", 1), ("I_14", 1), ("Up_4", 1)],
    "V_3":[("U_3", 4), ("I_12", 2), ("I_13", 2), ("I_14", 2), ("I_15", 2), ("O_3", 2)],
    "Vp_3":[("O_3", 1), ("Up_3", 2), ("I_12", 1), ("I_13", 1), ("I_14", 1), ("I_15", 1)],
    "I_15":[("Vp_3", 6), ("V_3", 5)], 

    "I_12":[("Vp_3", 3), ("V_3", 2)],
    "I_13":[("Vp_3", 4), ("V_3", 3)],
    "I_14":[("Vp_3", 5), ("V_3", 4)],
    "O_3":[("Vp_3",1), ("V_3", 6)],
    
 
    "U_2":[("I_5", 2), ("I_6", 2), ("V_1", 5), ("V_2",1)], 
    "Up_2":[("Vp_1", 6), ("Vp_2",2), ("I_5", 1), ("I_6", 1)], 
    "I_5":[("Up_2", 3), ("U_2", 1)],
    "I_6":[("Up_2", 4), ("U_2", 2)],
    
 
    "U_3":[("I_10", 2), ("I_11", 2), ("V_2", 5), ("V_3",1)], 
    "Up_3":[("Vp_2", 6), ("Vp_3",2), ("I_10", 1), ("I_11", 1)], 
    "I_10":[("Up_3", 3), ("U_3", 1)],
    "I_11":[("Up_3", 4), ("U_3", 2)],
    }

 
def make_template(num_of_V, plot=True):
    """
        joint parts of U, V to G4raw.
        note that this func wont give exactly G4raw, rather one need to deal with boundary legs by hand!
    """
    num_of_U = num_of_V-1
    res= "{"
    
    for t in ['V', 'U']:
        tmpl = globals()[t + '_tmpl']
        dic = globals()['D_' + t]
        start = 1 if t == 'V' else 2
        end = num_of_V if t == 'V' else num_of_U 
        for i in range(start, start + end):
            res+= "\n" 
            j = PERIOD*(i-1)+1
            res +=  tmpl % dic(i, j)
    res += "}" 

    if plot:
        G = Diagram(eval(res))
        G.plot(path=None, remove_O=False)
    
    #res = eval(res)
    return res
 
def plot_UV_templ():
    res= "{"
    #for i in range(2, 2 + num_of_U ):
    i = 2
    res+= "\n" 
    j = PERIOD*(i-1)+1
    res +=  U_tmpl % D_U(i, j)
    
    i = 1
    #for i in range(1, 1 + num_of_V):
    res+= "\n" 
    j = PERIOD*(i-1)+1
    res +=  V_tmpl % D_V(i, j)
    res += "}" 

    g = Diagram(eval(res))
    g.plot(remove_O=False)


if __name__ == "__main__":
    from merapy.diagrams.diagram import compare_template
    if 0:
        plot_UV_templ()
    if 0:
        res = make_template(num_of_V=3, plot=True)
        #res= eval(res)
        print res
    if 1:
        G = Diagram(G5)
        G.plot(path="G5_2block_template.png", remove_O=False)
    
    #compare_template(G4, res)
    


